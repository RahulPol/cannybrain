1.Modify root -> .env file and alter DB_DATABASE,DB_USERNAME,DB_PASSWORD to your db config.
2.Create DB in MySql Workbench with above configuration.
3.Migrate users and password_resets table from laravel app to db. 
This is the only migration done, all rest of the tables will be created directly in the database.
4.In this step we will integrate admin lte dashboard to laravel 5 app
--run npm install commmand
--install following node modules
1.npm install jquery@2.1.4 --save
2.npm install admin-lte --save
3.add following configuration to gulp file

var elixir = require('laravel-elixir');
var path = require('path');

/*
 |--------------------------------------------------------------------------
 | Elixir Asset Management
 |--------------------------------------------------------------------------
 |
 | Elixir provides a clean, fluent API for defining some basic Gulp tasks
 | for your Laravel application. By default, we are compiling the Less
 | file for our application, as well as publishing vendor resources.
 |
 */

elixir(function(mix) {
    //mix.less('app.less');
    mix

        .copy(
            'node_modules/admin-lte/bootstrap/fonts',
            'public/build/fonts/bootstrap'
        )

        .copy(
            'node_modules/admin-lte/dist/img',
            'public/build/img/adminlte'
        )

        .copy(
            'node_modules/admin-lte/bootstrap/css',
            'resources/assets/css/bootstrap'
        )

        .copy(
            'node_modules/admin-lte/dist/css',
            'resources/assets/css/adminlte'
        )

        .copy(
            'node_modules/jquery/dist/jquery.min.js',
            'resources/assets/js/jquery'
        )

        .copy(
            'node_modules/admin-lte/bootstrap/js/bootstrap.min.js',
            'resources/assets/js/bootstrap'
        )

        .copy(
            'node_modules/admin-lte/dist/js',
            'resources/assets/js/adminlte'
        )

        .styles([
            'bootstrap/bootstrap.min.css',
            'adminlte/skins/_all-skins.min.css',
            'adminlte/AdminLTE.min.css'
        ],'public/css/app.css')

        .scripts([
            'jquery/jquery.min.js',
            'bootstrap/bootstrap.min.js',
            'adminlte/app.min.js'
        ],'public/js/app.js')

        /**
        * Apply version control
        */

        .version([
         "public/css/app.css",
         "public/js/app.js"         
         ]);

        


    //mix.phpUnit([] , path.normalize('vendor/bin/phpunit') + ' --verbose');
});



4.visit https://almsaeedstudio.com/blog/integrate-adminlte-with-laravel and follow the steps to include admin lte in laravel project

5.[Optional]To enable debugging as present in laravel 4. Get filp/whoops package by running followin command
-composer require filp/whoops

In case while installing above package error like,
PHP Fatal error: Call to undefined method Illuminate\Foundation\Application::getCachedCompilePath() in 
/var/www/html/doaddme/vendor/laravel/framework/src/Illuminate/Foundation/Console/ClearCompiledCommand.php on line 28
this comes then delete vendor/compiled.php and updte composer and again run installation comand.

To enable above package add following code to app/Exceptions/Handler.php
i.modify render($request, Exception $e) function as follows

	public function render($request, Exception $e)
		{
			// if ($this->isHttpException($e))
			// {
			//     return $this->renderHttpException($e);
			// }

			// if (config('app.debug'))
			// {
			//     return $this->renderExceptionWithWhoops($e);
			// }
			return $this->renderExceptionWithWhoops($e);

			return parent::render($request, $e);
		}
	
ii.add following function at the end
	
	/**
	* Create a Symfony response for the given exception.
	*
	* @param  \Exception  $e
	* @return mixed
	*/
	 protected function renderExceptionWithWhoops(Exception $e)
    {
        $whoops = new \Whoops\Run;
        $whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler());

        return new \Illuminate\Http\Response(
            $whoops->handleException($e),
            $e->getStatusCode(),
            $e->getHeaders()
        );
    }

6.Add following code to users and password_resets migration
i.
<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateUsersTable extends Migration {

	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		Schema::create('users', function(Blueprint $table)
		{
			$table->increments('id');
			$table->string('name');
			$table->string('email')->unique();
			$table->string('password', 60);
			$table->integer('company_id');
			$table->string('group_name');
			$table->date('dob');
			$table->string('mobile_number');			
			$table->rememberToken();
			$table->timestamps();
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::drop('users');
	}

}

ii.	
<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePasswordResetsTable extends Migration {

	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		Schema::create('password_resets', function(Blueprint $table)
		{
			$table->string('email')->index();
			$table->string('token')->index();
			$table->timestamp('created_at');
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::drop('password_resets');
	}

}

7.Create db with following script
create table company
(
	id int NOT NULL auto_increment primary key,
    name varchar(5000) not null,
    location varchar(5000) null,
    logo varchar(500) null,
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)

create table company_admin
(
	id int NOT NULL auto_increment primary key,
    name varchar(500) not null,
    email varchar(255) unique not null,
    password varchar(60) not null,
    company_id int not null,
    confirmation_code varchar(300) null,    
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)	


create table category
(
	id int NOT NULL auto_increment primary key,
    name varchar(500) not null,    
    company_id int not null,    
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)


create table chapter
(
	id int NOT NULL auto_increment primary key,
    name varchar(500) not null,    
    category_id int not null,    
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)

create table answer_type
(
	id int NOT NULL auto_increment primary key,
    name varchar(500) not null,        
    created_at datetime not null,    
    is_active bit not null
)

create table question
(
	id int NOT NULL auto_increment primary key,
    title text null,
    body text not null,
    footer text null,
    optionA text null,
    optionB text null,
    optionC text null,
    optionD text null,
    optionE text null,
    optionF text null,
    marks decimal(18,8) not null,
    answer text null,
    answer_description text null,
    answer_type text null,
    negative_weightage decimal(18,8) null,
    chapter_id int not null,
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)


create table test
(
	id int NOT NULL auto_increment primary key,
    name text not null,
    total_marks int not null,
    company_id int not null,
    admin_id int not null,
    from_date datetime not null,
    to_date datetime  not null,
    start_time time not null,
    end_time time not null,
    duration int not null,
    url text not null,
    group_name text null,
    is_public bit null,    
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
)


create table test_details
(
	id int NOT NULL auto_increment primary key,
    test_id int not null,
    user_id int not null,
    test_status varchar(1000) not null, /*Active, Completed, Exited, Errored*/
    login_time datetime not null,
    logout_time datetime not null,
    created_at datetime not null,
    updated_at datetime not null,
    is_active bit not null
	
)

create table test_result
(
	id int NOT NULL auto_increment primary key,
    company_id int not null,
    user_id int not null,
    test_id int not null,
    question_id int not null,
    answer text null,
    marks decimal(18,8) not null,
    test_status varchar(1000) not null, /*complete,pending*/
    created_at datetime not null,  
    updated_at datetime not null,
    is_active bit not null
)

create table user_feedback
(
	id int NOT NULL auto_increment primary key,    
    user_id int not null,
    feedback text null,
    created_at datetime not null    
)